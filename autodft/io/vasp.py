import os

from pymatgen.core import Structure
import seekpath
from typing import Tuple
from autodft import config

class VaspIO:
    def __init__(self, structure: Structure, 
                 incar =None, 
                 potcar = None, 
                 kpoints = None, 
                 poscar = None):
        self.structure = structure
        self.incar = incar
        self.potcar = potcar
        self.kpoints = kpoints
        self.poscar = poscar
        
        if incar is None:
            self.incar = Incar()
            
        if potcar is None:
            self.potcar = Potcar(structure)
            
        if kpoints is None:
            self.kpoints = Kpoints(structure)
            
        if poscar is None:
            self.poscar = Poscar(structure)
        
        
        
class VaspInput:
    def __init__(self, structure: Structure):
        self.structure = structure
        self.incar = Incar(structure)
        self.potcar = Potcar(structure)
        self.kpoints = Kpoints(structure)
        self.poscar = Poscar(structure)


class Kpoints:
    def __init__(self, structure: Structure, params: dict=None):
        self.structure = structure
        
        self.params = params
        if self.params is None:
            self.params = {}
        
        self.type = None
        self.grid = None
        self.shift = None
        
        self.__dict__.update(self.params)
        
        if self.type == 'gamma':
            self.kpoints_string = self.get_gamma_mesh()
        elif self.type == 'monkhorst':
            self.kpoints_string = self.get_monkhorst_mesh()
        elif self.type == 'kpath':
            self.kpoints_string = self.get_kpath()
        else:
            raise ValueError("Invalid kpoints type. Set the type in the params dictionary. Must be 'gamma', 'monkhorst', or 'kpath'")

    def get_gamma_mesh(self, grid:Tuple[int, int, int] = None, shift:Tuple[int, int, int] = None):
        
        self.type = 'gamma'
        if grid is None and self.grid is None:
            raise ValueError("Grid must be specified. Either provide arguments or set the grid in the params dictionary")
        if shift is None and self.shift is None:
            raise ValueError("Shift must be specified. Either provide arguments or set the shift in the params dictionary")
        
        if grid:
            self.grid = grid
        if shift:
            self.shift = shift
        
        nx, ny, nz = self.grid
        sx, sy, sz = self.shift
        
        kmesh_string = f"KPOINTS generated by autodft in vasp.py\n0 ! number of kpoints\nGamma\n"
        
        kmesh_string += f"{nx} {ny} {nz} \n"
        kmesh_string += f"{sx} {sy} {sz}\n"

        return kmesh_string
    
    def get_monkhorst_mesh(self, grid:Tuple[int, int, int] = None, shift:Tuple[int, int, int] = None):

        self.type = 'monkhorst'
        if grid is None and self.grid is None:
            raise ValueError("Grid must be specified. Either provide arguments or set the grid in the params dictionary")
        if shift is None and self.shift is None:
            raise ValueError("Shift must be specified. Either provide arguments or set the shift in the params dictionary")
        
        if grid:
            self.grid = grid
        if shift:
            self.shift = shift
        
        nx, ny, nz = self.grid
        sx, sy, sz = self.shift
        
        kmesh_string = f"KPOINTS generated by autodft in vasp.py\n0 ! number of kpoints\nMonkhorst-Pack\n"
        
        kmesh_string += f"{nx} {ny} {nz} \n"
        kmesh_string += f"{sx} {sy} {sz}\n"
        return kmesh_string
        
    def get_kpath(self, grid_points=50, 
                  with_time_reversal=True, 
                  recipe='hpkot', 
                  threshold=1.0e-7, 
                  symprec=1e-05, 
                  angle_tolerance=-1.0):
        self.type = 'kpath'
        atomic_numbers = [site.specie.Z for site in self.structure]
        spglib_structure = (self.structure.lattice.matrix , self.structure.frac_coords, atomic_numbers)
        
        kpath=seekpath.get_path(spglib_structure, 
                        with_time_reversal=with_time_reversal, 
                        recipe=recipe, 
                        threshold=threshold,
                        symprec=symprec,
                        angle_tolerance=angle_tolerance)
        
        point_coords = kpath['point_coords']
        path = kpath['path']

        # Use StringIO to build the content in memory
        # output = StringIO()
        
        kmesh_string = "KPOINTS generated by seekpath in vasp.py\n"
        
        # Write header
        kmesh_string += f"{grid_points} ! Grid points\n"
        kmesh_string += "Line_mode\n"
        kmesh_string += "reciprocal\n"

        # Write k-points path
        for segment in path:
            start, end = segment
            start_coords = point_coords[start]
            end_coords = point_coords[end]

            # Write the start point
            kmesh_string += f"{start_coords[0]:.6f} {start_coords[1]:.6f} {start_coords[2]:.6f} ! {start}\n"
            # Write the end point
            kmesh_string += f"{end_coords[0]:.6f} {end_coords[1]:.6f} {end_coords[2]:.6f} ! {end}\n"
            # Separate segments with a blank line
            kmesh_string += "\n"
            
        return kmesh_string
    
    def write(self, filename, kpoints_string=None):
        if kpoints_string is None:
            kpoints_string = self.kpoints_string
        with open(filename, 'w') as f:
            f.write(kpoints_string)

class Incar:
    def __init__(self, params: dict = None):
        self.params = params
        
        if self.params is None:
            self.params = {}
        
        self.__dict__.update(self.params)
        
    @property
    def incar_string(self):
        incar_string = ""
        for key, value in self.params.items():
            incar_string += f"{key} = {value}\n"
        return incar_string
        
    def write(self, filename):
        with open(filename, 'w') as f:
            f.write(self.incar_string)
     
class Potcar:
    def __init__(self, structure: Structure, potcar_dir: str=None):
        self.structure = structure
        self.potcar_dir = potcar_dir
        
        if self.potcar_dir is None:
            self.potcar_dir = config.potcar_dir
        
        self.unique_species = []
        for specie in structure.species:
            if specie.name not in self.unique_species:
                self.unique_species.append(specie.name)
                
        self.potcar_str=self.get_potcar_string()
                
    def get_potcar_string(self):
        potcar_str=""
        for specie in self.unique_species:
            potcar_dirs=os.listdir(self.potcar_dir)
            
            
            possible_potcar_dirs=[]
            for potcar_dir in potcar_dirs:
                if specie in potcar_dir:
                    possible_potcar_dirs.append(potcar_dir)
            
            for potcar_dir in possible_potcar_dirs:
                if 'GW' in potcar_dir or '_' in potcar_dir:
                    continue
                    
                potcar_dirname=potcar_dir
                break
            
            potcar_dir=os.path.join(self.potcar_dir, potcar_dirname)
            potcar_filepath=os.path.join(potcar_dir, f"POTCAR")
            
            with open(potcar_filepath, 'r') as f:
                potcar_str+=f.read()
            
        return potcar_str

    def write(self, filename='POTCAR'):
        with open(filename, 'w') as f:
            f.write(self.potcar_str)


class Poscar:
    def __init__(self, structure: Structure):
        self.structure = structure

    def write(self, filename='POSCAR'):
        self.structure.to(filename=filename)